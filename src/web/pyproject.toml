[tool.poetry]
name = "VA2AM"
version = "1.0.0"
description = "Vulnerability Assessment to Asset Managment integration"
authors = ["Jakub Judiny <Jakub.Judiny@cesnet.cz>"]
readme = "README.md"
license = "MIT"
homepage = "https://va2am.cesnet.cz"
repository = "https://gitlab.cesnet.cz/713/vamp/va2am"

[tool.poetry.dependencies]
python = ">=3.11"
requests = "^2.32"
flask = "^3.1"
packaging = "^24.2"
bleach = { version = "^6.2", extras = ["css"] }
feedgen = "^1.0"
cachelib = "^0.13"

[tool.poetry.group.dev.dependencies]
pylint = "~3.3"
ruff = "~0.11"
djlint = "^1.36"
pytest = "^8.3"
pytest-playwright = "^0.7"
pytest-flask = "^1.3"
mypy = "~1.16"
types-bleach = "*"
types-requests = "*"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"


[tool.ruff]
exclude = [
    "warden"
]

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "UP",  # pyupgrade
    "PL",  # pylint
    "ERA",  # eradicate (commented-out code)
    "PERF",  # Perflint
    "FURB",  # refurb
    "RUF",  # ruff-specific rules
    "A",  # flake8-builtins,
    "B",  # flake8-bugbear
    "S",  # flake8-bandit
    "C4",  # flake8-comprehensions
    "DTZ",  # flake8-datetimez
    "LOG",  # flake8-logging
    "G",  # flake8-logging-format
    "PIE",  # flake8-pie
    "PYI",  # flake8-pyi
    "RET",  # flake8-return
    "SIM",  # flake8-simplify
    "PTH",  # flake8-use-pathlib
]
ignore = [
    "E501",  # line too long
    "PLR09",  # "too many ..." (pylint)
    "PLR2004",  # magic-value-comparison
    "UP007",  # Use `X | Y` for type annotations
    "SIM110",  # Use ... instead of loop
    "SIM108",  # Use ternary if operator
    "S101",  # Use of assert detected
    "S603",  # subprocess call: check for execution of untrusted input
    "S70",  # unsafe use of Markup detected
    "PERF203",  # try-except-in-loop
]


[tool.djlint]
profile = "jinja"
ignore = ""
max_blank_lines = 3
line_break_after_multiline_tag = true
format_js = true
format_css = true


[tool.pylint]
ignore = "warden"
disable = [
    "line-too-long",
    "too-many-locals",
    "too-many-arguments",
    "too-many-positional-arguments",
    "too-many-public-methods",
    "too-many-branches",
    "missing-module-docstring",
    "invalid-name"
]


[tool.mypy]
exclude = "playground.py"

warn_unused_configs = true
warn_redundant_casts = true
check_untyped_defs = true
disallow_subclassing_any = true
disallow_untyped_calls = true
disallow_untyped_defs = true
warn_unused_ignores = true
strict_equality = true
extra_checks = true
disallow_untyped_decorators = true
disallow_incomplete_defs = true
no_implicit_reexport = true
warn_return_any = false

[[tool.mypy.overrides]]  # Turn off strict for tests
module = "*.test.*"
check_untyped_defs = false
disallow_untyped_defs = false

[[tool.mypy.overrides]]  # Ignore Warden errors completely
module = "*.warden.*"
ignore_errors = true

[[tool.mypy.overrides]]  # Libraries without available stubs
module = [
    "feedgen.*",
    "pytest_flask.*"
]
ignore_missing_imports = true


[tool.pytest.ini_options]
live_server_scope = "function"
